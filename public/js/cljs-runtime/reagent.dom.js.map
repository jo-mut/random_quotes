{"version":3,"sources":["reagent/dom.cljs"],"mappings":"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","names":["js/reagent","js/reagent.dom","js/reagent.dom.roots","reagent.dom/roots","cljs.core.atom","reagent.dom/unmount-comp","container","cljs.core.swap_BANG_","cljs.core/dissoc","js/module$node_modules$react_dom$index.unmountComponentAtNode","reagent.dom/render-comp","comp","callback","*always-update*-orig-val__8354","*always-update*-temp-val__8355","reagent.impl.util/*always-update*","js/module$node_modules$react_dom$index.render","*always-update*-orig-val__8356","*always-update*-temp-val__8357","cljs.core/assoc","reagent.impl.batching/flush-after-render","reagent.dom/re-render-component","var_args","G__8371","reagent.dom/render","js/Error","reagent.dom.render","reagent.impl.template/*current-default-compiler*","callback-or-compiler","reagent.ratom/flush!","vec__8376","cljs.core.nth","compiler","cljs.core/map?","cljs.core/fn?","f","reagent.impl.protocols/as-element","reagent.dom/unmount-component-at-node","reagent.dom/dom-node","this","js/module$node_modules$react_dom$index.findDOMNode","reagent.dom/force-update-all","seq__8398","cljs.core/seq","cljs.core/deref","chunk__8399","count__8400","i__8401","vec__8419","temp__5804__auto__","cljs.core/chunked-seq?","c__5525__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","vec__8426","cljs.core/first","cljs.core/next"],"sourcesContent":["(ns reagent.dom\n  (:require [react-dom :as react-dom]\n            [reagent.impl.util :as util]\n            [reagent.impl.template :as tmpl]\n            [reagent.impl.batching :as batch]\n            [reagent.impl.protocols :as p]\n            [reagent.ratom :as ratom]))\n\n(defonce ^:private roots (atom {}))\n\n(defn- unmount-comp [container]\n  (swap! roots dissoc container)\n  (react-dom/unmountComponentAtNode container))\n\n(defn- render-comp [comp container callback]\n  (binding [util/*always-update* true]\n    (react-dom/render (comp) container\n      (fn []\n        (binding [util/*always-update* false]\n          (swap! roots assoc container comp)\n          (batch/flush-after-render)\n          (if (some? callback)\n            (callback)))))))\n\n(defn- re-render-component [comp container]\n  (render-comp comp container nil))\n\n(defn render\n  \"Render a Reagent component into the DOM. The first argument may be\n  either a vector (using Reagent's Hiccup syntax), or a React element.\n  The second argument should be a DOM node.\n\n  Optionally takes a callback that is called when the component is in place.\n\n  Returns the mounted component instance.\"\n  ([comp container]\n   (render comp container tmpl/*current-default-compiler*))\n  ([comp container callback-or-compiler]\n   (ratom/flush!)\n   (let [[compiler callback] (cond\n                               (map? callback-or-compiler)\n                               [(:compiler callback-or-compiler) (:callback callback-or-compiler)]\n\n                               (fn? callback-or-compiler)\n                               [tmpl/*current-default-compiler* callback-or-compiler]\n\n                               :else\n                               [callback-or-compiler nil])\n         f (fn []\n             (p/as-element compiler (if (fn? comp) (comp) comp)))]\n     (render-comp f container callback))))\n\n(defn unmount-component-at-node\n  \"Remove a component from the given DOM node.\"\n  [container]\n  (unmount-comp container))\n\n(defn dom-node\n  \"Returns the root DOM node of a mounted component.\"\n  {:deprecated \"1.2.0\"}\n  [this]\n  (react-dom/findDOMNode this))\n\n(defn force-update-all\n  \"Force re-rendering of all mounted Reagent components. This is\n  probably only useful in a development environment, when you want to\n  update components in response to some dynamic changes to code.\n\n  Note that force-update-all may not update root components. This\n  happens if a component 'foo' is mounted with `(render [foo])` (since\n  functions are passed by value, and not by reference, in\n  ClojureScript). To get around this you'll have to introduce a layer\n  of indirection, for example by using `(render [#'foo])` instead.\"\n  {:deprecated \"1.2.0\"}\n  []\n  (ratom/flush!)\n  (doseq [[container comp] @roots]\n    (re-render-component comp container))\n  (batch/flush-after-render))\n"],"x_google_ignoreList":[0]}